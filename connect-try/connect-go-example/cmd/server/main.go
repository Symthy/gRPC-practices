package main

import (
	"encoding/json"
	"net/http"

	// generated by protoc-gen-go
	"example/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
	"example/internal/interceptor"
	"example/internal/server"

	"github.com/bufbuild/connect-go"
	"github.com/rs/cors"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
)

func main() {
	interceptors := connect.WithInterceptors(
		interceptor.NewAuthStreamInterceptor(),
		interceptor.NewAuthInterceptor(),
	)

	api := http.NewServeMux()
	path, handler := greetv1connect.NewGreetServiceHandler(
		&server.GreetServer{},
		interceptors,
	)
	api.Handle(path, handler)

	mux := http.NewServeMux()
	// mux.Handle(path, handler)
	mux.Handle("/hello", helloHandler{})
	mux.Handle("/connect/", http.StripPrefix("/connect", api))
	// Use h2c so we can serve HTTP/2 without TLS.
	corsHandler := cors.AllowAll().Handler(h2c.NewHandler(mux, &http2.Server{}))
	http.ListenAndServe(
		"localhost:8080",
		corsHandler,
	)
}

var _ http.Handler = (*helloHandler)(nil)

type helloHandler struct {
}

func (helloHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodGet {
		res := Message{
			Message: "hello world",
		}
		json, err := json.Marshal(res)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(json)
	} else {
		w.Write([]byte("<html><p>Not Implementation.</p></html>"))
	}
	return
}

type Message struct {
	Message string `json:"message"`
}
